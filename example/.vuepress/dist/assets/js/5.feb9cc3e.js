(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{426:function(t,s,n){"use strict";n.r(s);var e=n(14),a=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"功能展示页"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#功能展示页"}},[t._v("#")]),t._v(" 功能展示页")]),t._v(" "),s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),s("p",[t._v("题目源自某场leetcode周赛")]),t._v(" "),s("h2",{attrs:{id:"t2-统计值等于子树平均值的节点数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#t2-统计值等于子树平均值的节点数"}},[t._v("#")]),t._v(" T2 统计值等于子树平均值的节点数")]),t._v(" "),s("p",[t._v("给你一棵二叉树的根节点 root ，找出并返回满足要求的节点数，要求节点的值等于其 子树 中值的 平均值")]),t._v(" "),s("p",[t._v("注意：")]),t._v(" "),s("p",[t._v("n 个元素的平均值可以由 n 个元素 求和 然后再除以 n ，并 向下舍入 到最近的整数。"),s("br"),t._v("\nroot 的 子树 由 root 和它的所有后代组成。")]),t._v(" "),s("p",[t._v("示例 1："),s("br"),t._v(" "),s("el-image",{attrs:{src:"https://assets.leetcode.com/uploads/2022/03/15/image-20220315203925-1.png",alt:"img","preview-src-list":["https://assets.leetcode.com/uploads/2022/03/15/image-20220315203925-1.png"]}})],1),t._v(" "),s("div",{staticClass:"mycodeblock",staticStyle:{position:"relative"}},[s("pre",[s("code",[t._v("输入：root = [4,8,5,0,1,null,6]\n输出：5\n解释：\n对值为 4 的节点：子树的平均值 (4 + 8 + 5 + 0 + 1 + 6) / 6 = 24 / 6 = 4 。\n对值为 5 的节点：子树的平均值 (5 + 6) / 2 = 11 / 2 = 5 。\n对值为 0 的节点：子树的平均值 0 / 1 = 0 。\n对值为 1 的节点：子树的平均值 1 / 1 = 1 。\n对值为 6 的节点：子树的平均值 6 / 1 = 6 。\n")])]),s("button",{staticClass:"code-copy-button",attrs:{"data-clipboard-text":"输入：root = [4,8,5,0,1,null,6]\n输出：5\n解释：\n对值为 4 的节点：子树的平均值 (4 + 8 + 5 + 0 + 1 + 6) / 6 = 24 / 6 = 4 。\n对值为 5 的节点：子树的平均值 (5 + 6) / 2 = 11 / 2 = 5 。\n对值为 0 的节点：子树的平均值 0 / 1 = 0 。\n对值为 1 的节点：子树的平均值 1 / 1 = 1 。\n对值为 6 的节点：子树的平均值 6 / 1 = 6 。\n"}},[s("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",stroke:"currentColor",width:"16",height:"16"}},[s("path",{attrs:{"stroke-linecap":"round","stroke-linejoin":"round",d:"M15.666 3.888A2.25 2.25 0 0013.5 2.25h-3c-1.03 0-1.9.693-2.166 1.638m7.332 0c.055.194.084.4.084.612v0a.75.75 0 01-.75.75H9a.75.75 0 01-.75-.75v0c0-.212.03-.418.084-.612m7.332 0c.646.049 1.288.11 1.927.184 1.1.128 1.907 1.077 1.907 2.185V19.5a2.25 2.25 0 01-2.25 2.25H6.75A2.25 2.25 0 014.5 19.5V6.257c0-1.108.806-2.057 1.907-2.185a48.208 48.208 0 011.927-.184"}})])])]),t._v(" "),s("p",[t._v("示例 2："),s("br"),t._v(" "),s("el-image",{attrs:{src:"https://assets.leetcode.com/uploads/2022/03/26/image-20220326133920-1.png",alt:"img2","preview-src-list":["https://assets.leetcode.com/uploads/2022/03/26/image-20220326133920-1.png"]}})],1),t._v(" "),s("div",{staticClass:"mycodeblock",staticStyle:{position:"relative"}},[s("pre",[s("code",[t._v("输入：root = [1]\n输出：1\n解释：对值为 1 的节点：子树的平均值 1 / 1 = 1。\n")])]),s("button",{staticClass:"code-copy-button",attrs:{"data-clipboard-text":"输入：root = [1]\n输出：1\n解释：对值为 1 的节点：子树的平均值 1 / 1 = 1。\n"}},[s("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",stroke:"currentColor",width:"16",height:"16"}},[s("path",{attrs:{"stroke-linecap":"round","stroke-linejoin":"round",d:"M15.666 3.888A2.25 2.25 0 0013.5 2.25h-3c-1.03 0-1.9.693-2.166 1.638m7.332 0c.055.194.084.4.084.612v0a.75.75 0 01-.75.75H9a.75.75 0 01-.75-.75v0c0-.212.03-.418.084-.612m7.332 0c.646.049 1.288.11 1.927.184 1.1.128 1.907 1.077 1.907 2.185V19.5a2.25 2.25 0 01-2.25 2.25H6.75A2.25 2.25 0 014.5 19.5V6.257c0-1.108.806-2.057 1.907-2.185a48.208 48.208 0 011.927-.184"}})])])]),t._v(" "),s("p",[t._v("提示：")]),t._v(" "),s("div",{staticClass:"mycodeblock",staticStyle:{position:"relative"}},[s("pre",[s("code",[t._v("树中节点数目在范围 [1, 1000] 内\n0 <= Node.val <= 1000\n")])]),s("button",{staticClass:"code-copy-button",attrs:{"data-clipboard-text":"树中节点数目在范围 [1, 1000] 内\n0 <= Node.val <= 1000\n"}},[s("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",stroke:"currentColor",width:"16",height:"16"}},[s("path",{attrs:{"stroke-linecap":"round","stroke-linejoin":"round",d:"M15.666 3.888A2.25 2.25 0 0013.5 2.25h-3c-1.03 0-1.9.693-2.166 1.638m7.332 0c.055.194.084.4.084.612v0a.75.75 0 01-.75.75H9a.75.75 0 01-.75-.75v0c0-.212.03-.418.084-.612m7.332 0c.646.049 1.288.11 1.927.184 1.1.128 1.907 1.077 1.907 2.185V19.5a2.25 2.25 0 01-2.25 2.25H6.75A2.25 2.25 0 014.5 19.5V6.257c0-1.108.806-2.057 1.907-2.185a48.208 48.208 0 011.927-.184"}})])])]),t._v(" "),s("h3",{attrs:{id:"思路"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#思路"}},[t._v("#")]),t._v(" 思路")]),t._v(" "),s("p",[t._v("dfs")]),t._v(" "),s("div",{staticClass:"mycodeblock",staticStyle:{position:"relative"}},[s("pre",[s("code",[s("span",{staticClass:"hljs-comment"},[t._v("/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */")]),t._v("\n"),s("span",{staticClass:"hljs-keyword"},[t._v("typedef")]),t._v(" pair<"),s("span",{staticClass:"hljs-type"},[t._v("int")]),t._v(","),s("span",{staticClass:"hljs-type"},[t._v("int")]),t._v("> pii;\n"),s("span",{staticClass:"hljs-keyword"},[t._v("class")]),t._v(" "),s("span",{staticClass:"hljs-title class_"},[t._v("Solution")]),t._v(" {\n"),s("span",{staticClass:"hljs-keyword"},[t._v("public")]),t._v(":\n    "),s("span",{staticClass:"hljs-type"},[t._v("int")]),t._v(" cnt="),s("span",{staticClass:"hljs-number"},[t._v("0")]),t._v(";\n    "),s("span",{staticClass:"hljs-function"},[s("span",{staticClass:"hljs-type"},[t._v("int")]),t._v(" "),s("span",{staticClass:"hljs-title"},[t._v("averageOfSubtree")]),s("span",{staticClass:"hljs-params"},[t._v("(TreeNode* root)")]),t._v(" ")]),t._v("{\n        "),s("span",{staticClass:"hljs-built_in"},[t._v("dfs")]),t._v("(root);\n        "),s("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" cnt;\n    }\n    "),s("span",{staticClass:"hljs-function"},[t._v("pii "),s("span",{staticClass:"hljs-title"},[t._v("dfs")]),s("span",{staticClass:"hljs-params"},[t._v("(TreeNode *node)")])]),t._v("{\n        "),s("span",{staticClass:"hljs-type"},[t._v("int")]),t._v(" ans=node->val;\n        "),s("span",{staticClass:"hljs-type"},[t._v("int")]),t._v(" num="),s("span",{staticClass:"hljs-number"},[t._v("1")]),t._v(";\n        "),s("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v("(node->left){\n            pii a="),s("span",{staticClass:"hljs-built_in"},[t._v("dfs")]),t._v("(node->left);\n            ans+=a.first;\n            num+=a.second;\n        }\n        "),s("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v("(node->right){\n            pii a="),s("span",{staticClass:"hljs-built_in"},[t._v("dfs")]),t._v("(node->right);\n            ans+=a.first;\n            num+=a.second;\n        }\n        "),s("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v("(ans/num==node->val){\n            cnt++;\n        }\n        "),s("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" "),s("span",{staticClass:"hljs-built_in"},[t._v("make_pair")]),t._v("(ans,num);\n    }\n};\n")])]),s("button",{staticClass:"code-copy-button",attrs:{"data-clipboard-text":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\ntypedef pair<int,int> pii;\nclass Solution {\npublic:\n    int cnt=0;\n    int averageOfSubtree(TreeNode* root) {\n        dfs(root);\n        return cnt;\n    }\n    pii dfs(TreeNode *node){\n        int ans=node->val;\n        int num=1;\n        if(node->left){\n            pii a=dfs(node->left);\n            ans+=a.first;\n            num+=a.second;\n        }\n        if(node->right){\n            pii a=dfs(node->right);\n            ans+=a.first;\n            num+=a.second;\n        }\n        if(ans/num==node->val){\n            cnt++;\n        }\n        return make_pair(ans,num);\n    }\n};\n"}},[s("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",stroke:"currentColor",width:"16",height:"16"}},[s("path",{attrs:{"stroke-linecap":"round","stroke-linejoin":"round",d:"M15.666 3.888A2.25 2.25 0 0013.5 2.25h-3c-1.03 0-1.9.693-2.166 1.638m7.332 0c.055.194.084.4.084.612v0a.75.75 0 01-.75.75H9a.75.75 0 01-.75-.75v0c0-.212.03-.418.084-.612m7.332 0c.646.049 1.288.11 1.927.184 1.1.128 1.907 1.077 1.907 2.185V19.5a2.25 2.25 0 01-2.25 2.25H6.75A2.25 2.25 0 014.5 19.5V6.257c0-1.108.806-2.057 1.907-2.185a48.208 48.208 0 011.927-.184"}})])])]),t._v(" "),s("h2",{attrs:{id:"t3-统计打字方案数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#t3-统计打字方案数"}},[t._v("#")]),t._v(" T3 统计打字方案数")]),t._v(" "),s("p",[t._v("Alice 在给 Bob 用手机打字。数字到字母的 对应 如下图所示。"),s("br"),t._v("\n为了 打出 一个字母，Alice 需要 按 对应字母 i 次，i 是该字母在这个按键上所处的位置。"),s("br"),t._v(" "),s("el-image",{attrs:{src:"https://assets.leetcode.com/uploads/2022/03/15/1200px-telephone-keypad2svg.png",alt:"pic","preview-src-list":["https://assets.leetcode.com/uploads/2022/03/15/1200px-telephone-keypad2svg.png"]}}),s("br"),t._v("\n比方说，为了按出字母 's' ，Alice 需要按 '7' 四次。类似的， Alice 需要按 '5' 两次得到字母  'k' 。"),s("br"),t._v("\n注意，数字 '0' 和 '1' 不映射到任何字母，所以 Alice 不 使用它们。"),s("br"),t._v("\n但是，由于传输的错误，Bob 没有收到 Alice 打字的字母信息，反而收到了 按键的字符串信息 。")],1),t._v(" "),s("p",[t._v('比方说，Alice 发出的信息为 "bob" ，Bob 将收到字符串 "2266622" 。'),s("br"),t._v("\n给你一个字符串 pressedKeys ，表示 Bob 收到的字符串，请你返回 Alice 总共可能发出多少种文字信息 。")]),t._v(" "),s("p",[t._v("由于答案可能很大，将它对 109 + 7 取余 后返回。")])])}),[],!1,null,null,null);s.default=a.exports}}]);